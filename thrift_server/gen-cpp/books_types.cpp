/**
 * Autogenerated by Thrift Compiler (0.14.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "books_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace store { namespace books {


Book::~Book() noexcept {
}


void Book::__set_id(const int32_t val) {
  this->id = val;
}

void Book::__set_Title(const std::string& val) {
  this->Title = val;
}

void Book::__set_Author(const std::string& val) {
  this->Author = val;
}

void Book::__set_numPages(const int16_t val) {
  this->numPages = val;
}
std::ostream& operator<<(std::ostream& out, const Book& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t Book::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Title);
          this->__isset.Title = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Author);
          this->__isset.Author = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->numPages);
          this->__isset.numPages = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Book::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Book");

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Title", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->Title);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Author", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->Author);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("numPages", ::apache::thrift::protocol::T_I16, 4);
  xfer += oprot->writeI16(this->numPages);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Book &a, Book &b) {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a.Title, b.Title);
  swap(a.Author, b.Author);
  swap(a.numPages, b.numPages);
  swap(a.__isset, b.__isset);
}

Book::Book(const Book& other0) {
  id = other0.id;
  Title = other0.Title;
  Author = other0.Author;
  numPages = other0.numPages;
  __isset = other0.__isset;
}
Book& Book::operator=(const Book& other1) {
  id = other1.id;
  Title = other1.Title;
  Author = other1.Author;
  numPages = other1.numPages;
  __isset = other1.__isset;
  return *this;
}
void Book::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Book(";
  out << "id=" << to_string(id);
  out << ", " << "Title=" << to_string(Title);
  out << ", " << "Author=" << to_string(Author);
  out << ", " << "numPages=" << to_string(numPages);
  out << ")";
}

}} // namespace
