/**
 * Autogenerated by Thrift Compiler (0.14.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef Catalog_H
#define Catalog_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include <memory>
#include "books_types.h"

namespace store { namespace books {

#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class CatalogIf {
 public:
  virtual ~CatalogIf() {}
  virtual void ping() = 0;
  virtual void deep_ping() = 0;
  virtual void getBookById(Book& _return, const int32_t id) = 0;
};

class CatalogIfFactory {
 public:
  typedef CatalogIf Handler;

  virtual ~CatalogIfFactory() {}

  virtual CatalogIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(CatalogIf* /* handler */) = 0;
};

class CatalogIfSingletonFactory : virtual public CatalogIfFactory {
 public:
  CatalogIfSingletonFactory(const ::std::shared_ptr<CatalogIf>& iface) : iface_(iface) {}
  virtual ~CatalogIfSingletonFactory() {}

  virtual CatalogIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(CatalogIf* /* handler */) {}

 protected:
  ::std::shared_ptr<CatalogIf> iface_;
};

class CatalogNull : virtual public CatalogIf {
 public:
  virtual ~CatalogNull() {}
  void ping() {
    return;
  }
  void deep_ping() {
    return;
  }
  void getBookById(Book& /* _return */, const int32_t /* id */) {
    return;
  }
};


class Catalog_ping_args {
 public:

  Catalog_ping_args(const Catalog_ping_args&);
  Catalog_ping_args& operator=(const Catalog_ping_args&);
  Catalog_ping_args() {
  }

  virtual ~Catalog_ping_args() noexcept;

  bool operator == (const Catalog_ping_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Catalog_ping_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Catalog_ping_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Catalog_ping_pargs {
 public:


  virtual ~Catalog_ping_pargs() noexcept;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Catalog_ping_result {
 public:

  Catalog_ping_result(const Catalog_ping_result&);
  Catalog_ping_result& operator=(const Catalog_ping_result&);
  Catalog_ping_result() {
  }

  virtual ~Catalog_ping_result() noexcept;

  bool operator == (const Catalog_ping_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Catalog_ping_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Catalog_ping_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Catalog_ping_presult {
 public:


  virtual ~Catalog_ping_presult() noexcept;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Catalog_deep_ping_args {
 public:

  Catalog_deep_ping_args(const Catalog_deep_ping_args&);
  Catalog_deep_ping_args& operator=(const Catalog_deep_ping_args&);
  Catalog_deep_ping_args() {
  }

  virtual ~Catalog_deep_ping_args() noexcept;

  bool operator == (const Catalog_deep_ping_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Catalog_deep_ping_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Catalog_deep_ping_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Catalog_deep_ping_pargs {
 public:


  virtual ~Catalog_deep_ping_pargs() noexcept;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Catalog_deep_ping_result {
 public:

  Catalog_deep_ping_result(const Catalog_deep_ping_result&);
  Catalog_deep_ping_result& operator=(const Catalog_deep_ping_result&);
  Catalog_deep_ping_result() {
  }

  virtual ~Catalog_deep_ping_result() noexcept;

  bool operator == (const Catalog_deep_ping_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Catalog_deep_ping_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Catalog_deep_ping_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Catalog_deep_ping_presult {
 public:


  virtual ~Catalog_deep_ping_presult() noexcept;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Catalog_getBookById_args__isset {
  _Catalog_getBookById_args__isset() : id(false) {}
  bool id :1;
} _Catalog_getBookById_args__isset;

class Catalog_getBookById_args {
 public:

  Catalog_getBookById_args(const Catalog_getBookById_args&);
  Catalog_getBookById_args& operator=(const Catalog_getBookById_args&);
  Catalog_getBookById_args() : id(0) {
  }

  virtual ~Catalog_getBookById_args() noexcept;
  int32_t id;

  _Catalog_getBookById_args__isset __isset;

  void __set_id(const int32_t val);

  bool operator == (const Catalog_getBookById_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const Catalog_getBookById_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Catalog_getBookById_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Catalog_getBookById_pargs {
 public:


  virtual ~Catalog_getBookById_pargs() noexcept;
  const int32_t* id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Catalog_getBookById_result__isset {
  _Catalog_getBookById_result__isset() : success(false) {}
  bool success :1;
} _Catalog_getBookById_result__isset;

class Catalog_getBookById_result {
 public:

  Catalog_getBookById_result(const Catalog_getBookById_result&);
  Catalog_getBookById_result& operator=(const Catalog_getBookById_result&);
  Catalog_getBookById_result() {
  }

  virtual ~Catalog_getBookById_result() noexcept;
  Book success;

  _Catalog_getBookById_result__isset __isset;

  void __set_success(const Book& val);

  bool operator == (const Catalog_getBookById_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Catalog_getBookById_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Catalog_getBookById_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Catalog_getBookById_presult__isset {
  _Catalog_getBookById_presult__isset() : success(false) {}
  bool success :1;
} _Catalog_getBookById_presult__isset;

class Catalog_getBookById_presult {
 public:


  virtual ~Catalog_getBookById_presult() noexcept;
  Book* success;

  _Catalog_getBookById_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class CatalogClient : virtual public CatalogIf {
 public:
  CatalogClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  CatalogClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void ping();
  void send_ping();
  void recv_ping();
  void deep_ping();
  void send_deep_ping();
  void recv_deep_ping();
  void getBookById(Book& _return, const int32_t id);
  void send_getBookById(const int32_t id);
  void recv_getBookById(Book& _return);
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class CatalogProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::std::shared_ptr<CatalogIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (CatalogProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_ping(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_deep_ping(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getBookById(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  CatalogProcessor(::std::shared_ptr<CatalogIf> iface) :
    iface_(iface) {
    processMap_["ping"] = &CatalogProcessor::process_ping;
    processMap_["deep_ping"] = &CatalogProcessor::process_deep_ping;
    processMap_["getBookById"] = &CatalogProcessor::process_getBookById;
  }

  virtual ~CatalogProcessor() {}
};

class CatalogProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  CatalogProcessorFactory(const ::std::shared_ptr< CatalogIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::std::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::std::shared_ptr< CatalogIfFactory > handlerFactory_;
};

class CatalogMultiface : virtual public CatalogIf {
 public:
  CatalogMultiface(std::vector<std::shared_ptr<CatalogIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~CatalogMultiface() {}
 protected:
  std::vector<std::shared_ptr<CatalogIf> > ifaces_;
  CatalogMultiface() {}
  void add(::std::shared_ptr<CatalogIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void ping() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->ping();
    }
    ifaces_[i]->ping();
  }

  void deep_ping() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->deep_ping();
    }
    ifaces_[i]->deep_ping();
  }

  void getBookById(Book& _return, const int32_t id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getBookById(_return, id);
    }
    ifaces_[i]->getBookById(_return, id);
    return;
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class CatalogConcurrentClient : virtual public CatalogIf {
 public:
  CatalogConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(prot);
  }
  CatalogConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void ping();
  int32_t send_ping();
  void recv_ping(const int32_t seqid);
  void deep_ping();
  int32_t send_deep_ping();
  void recv_deep_ping(const int32_t seqid);
  void getBookById(Book& _return, const int32_t id);
  int32_t send_getBookById(const int32_t id);
  void recv_getBookById(Book& _return, const int32_t seqid);
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif

}} // namespace

#endif
